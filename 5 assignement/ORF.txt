"""
Created on Tue Dec 22 23:19:02 2020

@author: Marco
"""

from Bio.Seq import Seq
from Bio.Seq import transcribe

s="AGCCATGTAGCTAACTCAGGTTACATGGGGATGACCCCGCGACTTGGATTAGAGTCTCTTTTGGAATAAGCCTGAATGATCCGAGTAGCATCTCAG"
s2="GCCATGTAGCTAACTCAGGTTACATGGGGATGACCCCGCGACTTGGATTAGAGTCTCTTTTGGAATAAGCCTGAATGATCCGAGTAGCATCTC"
s3="CCATGTAGCTAACTCAGGTTACATGGGGATGACCCCGCGACTTGGATTAGAGTCTCTTTTGGAATAAGCCTGAATGATCCGAGTAGCATCTCA"
dna_seq = Seq(s)
dna_seq2 = Seq(s2)
dna_seq3 = Seq(s3)
complement = dna_seq.reverse_complement()
complement2 = dna_seq2.reverse_complement()
complement3 = dna_seq3.reverse_complement()

tc = transcribe(complement).translate(to_stop=True)
t = transcribe(dna_seq).translate(to_stop=True)
tc2 = transcribe(complement2).translate(to_stop=True)
t2 = transcribe(dna_seq2).translate(to_stop=True)
tc3 = transcribe(complement3).translate(to_stop=True)
t3 = transcribe(dna_seq3).translate(to_stop=True)
print(t)
print(tc)
print("---------------")
print(t2)
print(tc2)
print("---------------")
print(t3)
print(tc3)


from Bio import SeqIO
from Bio.Data import CodonTable

f = open("rosalind_orf.txt", 'r')
record = SeqIO.read(f, "fasta")
f.close()


standard_table = CodonTable.unambiguous_dna_by_name["Standard"]
stop_codons = standard_table.stop_codons


def chunker(seq, size):
    return (seq[pos:pos + size] for pos in range(0, len(seq), size))


proteins = set()

for strand in [record.seq, record.seq.reverse_complement()]:

    for start in range(len(strand)-2):
        start_codon = str(strand[start:start+3])
        
        if start_codon == "ATG":
            frame = str(strand[start:])
            
            if any(st in chunker(frame[3:], 3) for st in stop_codons):
               
                prot = str(strand[start:].translate(to_stop=True))
                proteins.add(prot)


print ("\n".join(proteins))